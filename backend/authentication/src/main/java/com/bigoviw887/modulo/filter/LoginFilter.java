package com.bigoviw887.modulo.filter;

import com.bigoviw887.modulo.dto.UserObjDto;
import com.bigoviw887.modulo.mapper.UserObjMapper;
import com.bigoviw887.modulo.model.User;
import com.bigoviw887.modulo.schema.UserLoginSchema;
import com.bigoviw887.modulo.schema.UserObjSchema;
import com.bigoviw887.modulo.util.CookieJwtUtil;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.FilterChain;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import java.io.IOException;
import java.util.Set;
import javax.annotation.processing.Generated;
import lombok.NoArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseCookie;
import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Generated(value = "com.exocoding.codegen", comments = "Generated by ExoCoding 0.0.1-SNAPSHOT")
@NoArgsConstructor
public class LoginFilter extends UsernamePasswordAuthenticationFilter {
  @Autowired private CookieJwtUtil cookieJwtUtil;
  @Autowired private UserObjMapper userObjMapper;

  @Override
  @Autowired
  public void setAuthenticationManager(AuthenticationManager authenticationManager) {
    super.setAuthenticationManager(authenticationManager);
  }

  @Override
  public Authentication attemptAuthentication(HttpServletRequest req, HttpServletResponse res)
      throws AuthenticationException {
    try {
      UserLoginSchema creds =
          new ObjectMapper().readValue(req.getInputStream(), UserLoginSchema.class);

      // Proceed with the validation of the request fields.
      Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
      Set<ConstraintViolation<UserLoginSchema>> violations = validator.validate(creds);
      if (!violations.isEmpty()) {
        ObjectMapper mapper = new ObjectMapper();
        throw new AuthenticationCredentialsNotFoundException(mapper.writeValueAsString(violations));
      }

      UsernamePasswordAuthenticationToken token =
          new UsernamePasswordAuthenticationToken(creds.getEmail(), creds.getPassword());

      setDetails(req, token);

      return this.getAuthenticationManager().authenticate(token);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  protected void successfulAuthentication(
      HttpServletRequest req, HttpServletResponse res, FilterChain chain, Authentication auth)
      throws IOException {

    User user = (User) auth.getPrincipal();

    String token = cookieJwtUtil.generateToken(user);

    UserObjDto userDto = userObjMapper.entityToDto(user);
    UserObjSchema userSchema = userObjMapper.dtoToSchema(userDto);

    ObjectMapper objectMapper = new ObjectMapper();
    objectMapper.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);
    String jsonString = objectMapper.writeValueAsString(userSchema);

    ResponseCookie jwtCookie = cookieJwtUtil.createTokenCookie(token);

    res.setContentType("application/json");
    res.setCharacterEncoding("UTF-8");
    res.setHeader(HttpHeaders.SET_COOKIE, jwtCookie.toString());
    res.getWriter().print(jsonString);
    res.getWriter().flush();
  }
}
