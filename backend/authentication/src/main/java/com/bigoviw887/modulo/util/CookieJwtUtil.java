package com.bigoviw887.modulo.util;

import com.bigoviw887.modulo.model.User;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Encoders;
import io.jsonwebtoken.security.Keys;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import java.io.Serial;
import java.io.Serializable;
import java.security.Key;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;
import javax.annotation.processing.Generated;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseCookie;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

@Generated(value = "com.exocoding.codegen", comments = "Generated by ExoCoding 0.0.1-SNAPSHOT")
@Component
public class CookieJwtUtil implements Serializable {

  @Serial private static final long serialVersionUID = 234234523523L;

  @Value("${jwt.secret}")
  private String secretKey;

  @Value("#{${jwt.expiration}}")
  private int jwtValidity;

  public static String getValueCookie(String name) {
    HttpServletRequest request =
        ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
    if (request.getCookies() != null) {
      return Arrays.stream(request.getCookies())
          .filter(cookie -> name.equals(cookie.getName()))
          .map(Cookie::getValue)
          .findAny()
          .orElse(null);
    } else {
      return null;
    }
  }

  public String generateToken(User userDetails) {
    Map<String, Object> claims = new HashMap<>();
    String base64Key = Encoders.BASE64.encode(secretKey.getBytes());
    byte[] keyBytes = base64Key.getBytes();
    Key key = Keys.hmacShaKeyFor(keyBytes);
    return Jwts.builder()
        .setClaims(claims)
        .setSubject(userDetails.getEmail())
        .setIssuedAt(new Date(System.currentTimeMillis()))
        .setExpiration(new Date(System.currentTimeMillis() + jwtValidity))
        .signWith(key)
        .compact();
  }

  public String getEmailFromToken(String token) {
    return getClaimFromToken(token, Claims::getSubject);
  }

  public ResponseCookie createTokenCookie(String token) {
    int maxAge = (int) getExpirationDateFromToken(token).getTime() / 1000;

    ResponseCookie.ResponseCookieBuilder jwtCookie =
        ResponseCookie.from("token", token).httpOnly(true).path("/").maxAge(maxAge);

    return jwtCookie.build();
  }

  public Boolean validateToken(String token, User userDetails) {
    final String email = getEmailFromToken(token);
    return (email.equals(userDetails.getEmail()) && !isTokenExpired(token));
  }

  private <T> T getClaimFromToken(String token, Function<Claims, T> claimsResolver) {
    final Claims claims = getAllClaimsFromToken(token);
    return claimsResolver.apply(claims);
  }

  private Claims getAllClaimsFromToken(String token) {
    String base64Key = Encoders.BASE64.encode(secretKey.getBytes());
    byte[] keyBytes = base64Key.getBytes();
    Key key = Keys.hmacShaKeyFor(keyBytes);
    return Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token).getBody();
  }

  private Date getExpirationDateFromToken(String token) {
    return getClaimFromToken(token, Claims::getExpiration);
  }

  private Boolean isTokenExpired(String token) {
    final Date expiration = getExpirationDateFromToken(token);
    return expiration.before(new Date());
  }
}
