package com.bigoviw887.modulo.services;

import com.bigoviw887.modulo.dto.AccountDto;
import com.bigoviw887.modulo.dto.UserObjDto;
import com.bigoviw887.modulo.dto.UserRegisterDto;
import com.bigoviw887.modulo.exceptions.ConflictException;
import com.bigoviw887.modulo.exceptions.NotFoundException;
import com.bigoviw887.modulo.exceptions.UnauthorizedException;
import com.bigoviw887.modulo.mapper.UserObjMapper;
import com.bigoviw887.modulo.mapper.UserRegisterMapper;
import com.bigoviw887.modulo.model.Role;
import com.bigoviw887.modulo.model.User;
import com.bigoviw887.modulo.model.UserRole;
import com.bigoviw887.modulo.repos.RoleRepository;
import com.bigoviw887.modulo.repos.UserRepository;
import com.bigoviw887.modulo.repos.UserRoleRepository;
import jakarta.transaction.Transactional;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.annotation.processing.Generated;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Generated(value = "com.exocoding.codegen", comments = "Generated by ExoCoding 0.0.1-SNAPSHOT")
@Service
@RequiredArgsConstructor(onConstructor_ = @Autowired)
@Transactional
public class AuthService implements UserDetailsService {
  private final UserObjMapper userObjMapper;
  private final UserRepository userRepository;
  private final RoleRepository roleRepository;
  private final UserRoleRepository userRoleRepository;
  private final PasswordEncoder passwordEncoder;
  private final UserRegisterMapper userRegisterMapper;

  @Override
  public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
    return loadUserByEmail(username);
  }

  /** Create a new Role */
  public void createRole(String roleName) {
    if (roleRepository.existsByName(roleName)) {
      throw new ConflictException();
    }

    Role role = new Role();
    role.setName(roleName);

    roleRepository.save(role);

    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
    User user = (User) authentication.getPrincipal();

    UserRole userRole = new UserRole();
    userRole.setRole(role);
    userRole.setUser(user);

    userRoleRepository.save(userRole);
  }

  /** Create a new user */
  public void createUser(UserRegisterDto user) {
    if (userRepository.existsByUsername(user.getUsername())) {
      throw new ConflictException();
    }

    if (userRepository.existsByEmail(user.getEmail())) {
      throw new ConflictException();
    }

    User newUser = new User();
    newUser.setName(user.getName());
    newUser.setEmail(user.getEmail());
    newUser.setUsername(user.getUsername());
    if (user.getPassword() != null) {
      newUser.setPassword(passwordEncoder.encode(user.getPassword()));
    }

    Optional<UserRole> role = userRoleRepository.findByRole_Name("USER");
    if (role.isPresent()) {
      newUser.addUserRole(role.get());
    }
    userRepository.save(newUser);
  }

  /** Get the login user */
  public AccountDto getCurrentUser() {
    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
    if (authentication == null || !authentication.isAuthenticated()) {
      throw new UnauthorizedException();
    }
    if (authentication instanceof AnonymousAuthenticationToken) {
      throw new UnauthorizedException();
    }
    User user = (User) authentication.getPrincipal();
    UserObjDto userDto = userObjMapper.entityToDto(user);
    List<String> roles = new ArrayList<>();
    for (UserRole role : user.getUserRole()) {
      roles.add(role.getRole().getName());
    }
    AccountDto accountDto = new AccountDto();
    accountDto.setUser(userDto);
    accountDto.setRoles(roles);

    return accountDto;
  }

  /** Load user by email */
  public User loadUserByEmail(String email) {
    User user =
        userRepository
            .findByEmail(email)
            .orElseThrow(() -> new UsernameNotFoundException("User not found"));
    user.getUserRole().stream().map(userRole -> userRole.getRole()).collect(Collectors.toSet());
    return user;
  }

  /** Remove roles of users */
  public void removeUserRoles(Long userId, String roleName) {
    UserRole userRole =
        userRoleRepository
            .findByRole_NameAndUser_IdUser(roleName, userId)
            .orElseThrow(() -> new NotFoundException());

    userRoleRepository.delete(userRole);
  }

  /** Update roles of users */
  public void updateUserRoles(Long userId, String roleName) {
    User user = userRepository.findById(userId).orElseThrow(() -> new NotFoundException());

    Role role = roleRepository.findByName(roleName).orElseThrow(() -> new NotFoundException());

    UserRole userRole = new UserRole();
    userRole.setRole(role);
    userRole.setUser(user);

    userRoleRepository.save(userRole);
  }
}
