package com.bigoviw887.modulo.model;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import javax.annotation.processing.Generated;
import lombok.Data;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

/** Application user */
@Generated(value = "com.exocoding.codegen", comments = "Generated by ExoCoding 0.0.1-SNAPSHOT")
@Data
@Entity
@Table(name = "Users")
public class User extends AbstractEntity implements UserDetails {

  @Column(nullable = false)
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  protected Long idUser;

  // relationship between user and UserRole
  @OneToMany(
      mappedBy = "user",
      cascade = {CascadeType.PERSIST},
      fetch = FetchType.LAZY,
      orphanRemoval = true)
  protected List<UserRole> userRole = new LinkedList<>();

  @Column(nullable = false, columnDefinition = "text")
  protected String email;

  @Column(nullable = false, columnDefinition = "text")
  protected String name;

  @Column(nullable = false, length = 128)
  protected String password;

  @Column(nullable = false, length = 64)
  protected String username;

  public void addUserRole(UserRole userRole) {
    this.userRole.add(userRole);
    userRole.setUser(this);
  }

  public void removeUserRole(UserRole userRole) {
    this.userRole.remove(userRole);
    userRole.setUser(null);
  }

  public void setUserRole(List<UserRole> userRole) {
    if (this.userRole != null) {
      this.userRole.forEach(z -> z.setUser(null));
    }
    if (userRole != null) {
      userRole.forEach(z -> z.setUser(this));
    }
    this.userRole = userRole;
  }

  @Override
  public Collection<? extends GrantedAuthority> getAuthorities() {
    Collection<GrantedAuthority> authorities = new ArrayList<>();

    for (UserRole ur : userRole) {
      String nameRole = convertStringAuthority(ur.getRole().getName());
      authorities.add(new SimpleGrantedAuthority(nameRole));

      // for (Role_Permission rp : ur.getRole().getRole_Permission()) {
      //  String namePermission = convertStringAuthority(rp.getPermission().getName());
      //  authorities.add(
      //      new SimpleGrantedAuthority(String.format("%s:%s", nameRole, namePermission)));
      // }
    }
    return authorities;
  }

  private String convertStringAuthority(String name) {
    return name.toUpperCase().trim().replaceAll(" +", "_");
  }

  @Override
  public boolean isAccountNonExpired() {
    return true;
  }

  @Override
  public boolean isAccountNonLocked() {
    return true;
  }

  @Override
  public boolean isCredentialsNonExpired() {
    return true;
  }

  @Override
  public boolean isEnabled() {
    return true;
  }
}
