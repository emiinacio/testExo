package com.bigoviw887.modulo.controllers;

import com.bigoviw887.modulo.dto.TaskHdrDto;
import com.bigoviw887.modulo.mapper.TaskHdrMapper;
import com.bigoviw887.modulo.schema.TaskHdrSchema;
import com.bigoviw887.modulo.services.TaskHdrService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import java.util.List;
import javax.annotation.processing.Generated;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@Generated(value = "com.exocoding.codegen", comments = "Generated by ExoCoding 0.0.1-SNAPSHOT")
@RestController
@RequiredArgsConstructor(onConstructor_ = @Autowired)
public class TaskHdrController {

  private final TaskHdrService taskHdrService;

  private final TaskHdrMapper taskHdrMapper;

  @DeleteMapping(path = "/taskhdr/{id}")
  @Operation(
      summary = "Delete one TaskHdr",
      responses = {
        @ApiResponse(responseCode = "200", description = "TaskHdr"),
        @ApiResponse(responseCode = "404", description = "TaskHdr")
      })
  protected ResponseEntity<Void> deleteTaskHdr(@PathVariable Long id) {
    taskHdrService.deleteTaskHdr(id);
    ResponseEntity<Void> responseEntity = new ResponseEntity<>(HttpStatus.OK);
    return responseEntity;
  }

  @DeleteMapping(path = "/taskhdrlist")
  @Operation(
      summary = "Delete a list of TaskHdr",
      responses = {
        @ApiResponse(responseCode = "200", description = "TaskHdr"),
        @ApiResponse(responseCode = "404", description = "TaskHdr")
      })
  protected void deleteTaskHdrList(@RequestBody List<TaskHdrSchema> taskHdrList) {}

  @DeleteMapping(path = "/taskhdrlistById")
  @Operation(
      summary = "Delete a list of TaskHdr",
      responses = {
        @ApiResponse(responseCode = "200", description = "TaskHdr"),
        @ApiResponse(responseCode = "404", description = "TaskHdr")
      })
  protected void deleteTaskHdrListById(@RequestBody List<Long> taskHdrIds) {}

  @GetMapping(path = "/taskhdr/{id}")
  @Operation(
      summary = "Read one TaskHdr",
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "TaskHdr",
            content = @Content(schema = @Schema(implementation = TaskHdrSchema.class))),
        @ApiResponse(responseCode = "404", description = "TaskHdr")
      })
  protected ResponseEntity<TaskHdrSchema> getTaskHdr(@PathVariable Long id) {
    TaskHdrDto returnVariable = null;
    returnVariable = taskHdrService.readTaskHdr(id);
    TaskHdrSchema taskHdrSchema = taskHdrMapper.dtoToSchema(returnVariable);
    ResponseEntity<TaskHdrSchema> responseEntity =
        new ResponseEntity<>(taskHdrSchema, HttpStatus.OK);
    return responseEntity;
  }

  @GetMapping(path = "/taskhdrlist")
  @Operation(
      summary = "Read a list of TaskHdr",
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "TaskHdr",
            content = @Content(schema = @Schema(implementation = TaskHdrSchema.class))),
        @ApiResponse(responseCode = "404", description = "TaskHdr")
      })
  protected ResponseEntity<TaskHdrSchema> getTaskHdrList() {
    List<TaskHdrDto> returnVariable = null;
    returnVariable = taskHdrService.readTaskHdrList();
    List<TaskHdrSchema> taskHdrSchema = taskHdrMapper.dtoToSchema(returnVariable);
    ResponseEntity<TaskHdrSchema> responseEntity =
        new ResponseEntity<>(taskHdrSchema, HttpStatus.OK);
    return responseEntity;
  }

  @PostMapping(path = "/taskhdr")
  @Operation(
      summary = "Create one TaskHdr",
      responses =
          @ApiResponse(
              responseCode = "201",
              description = "TaskHdr",
              content = @Content(schema = @Schema(implementation = TaskHdrSchema.class))))
  protected ResponseEntity<TaskHdrSchema> postTaskHdr(@RequestBody TaskHdrSchema taskHdr) {
    TaskHdrDto returnVariable = null;
    TaskHdrDto taskHdrDto = taskHdrMapper.schemaToDto(taskHdr);
    returnVariable = taskHdrService.createTaskHdr(taskHdrDto);
    TaskHdrSchema taskHdrSchema = taskHdrMapper.dtoToSchema(returnVariable);
    ResponseEntity<TaskHdrSchema> responseEntity =
        new ResponseEntity<>(taskHdrSchema, HttpStatus.OK);
    return responseEntity;
  }

  @PostMapping(path = "/taskhdrlist")
  @Operation(
      summary = "Create a list of TaskHdr",
      responses =
          @ApiResponse(
              responseCode = "201",
              description = "TaskHdr",
              content = @Content(schema = @Schema(implementation = TaskHdrSchema.class))))
  protected void postTaskHdrList(@RequestBody List<TaskHdrSchema> taskHdrList) {}

  @PutMapping(path = "/taskhdr/{id}")
  @Operation(
      summary = "Update one TaskHdr",
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "TaskHdr",
            content = @Content(schema = @Schema(implementation = TaskHdrSchema.class))),
        @ApiResponse(responseCode = "404", description = "TaskHdr")
      })
  protected ResponseEntity<TaskHdrSchema> putTaskHdr(
      @PathVariable Long id, @RequestBody TaskHdrSchema taskHdr) {
    taskHdr.setId(id);
    TaskHdrDto returnVariable = null;
    TaskHdrDto taskHdrDto = taskHdrMapper.schemaToDto(taskHdr);
    returnVariable = taskHdrService.updateTaskHdr(taskHdrDto);
    TaskHdrSchema taskHdrSchema = taskHdrMapper.dtoToSchema(returnVariable);
    ResponseEntity<TaskHdrSchema> responseEntity =
        new ResponseEntity<>(taskHdrSchema, HttpStatus.OK);
    return responseEntity;
  }

  @PutMapping(path = "/taskhdrlist")
  @Operation(
      summary = "Update a list of TaskHdr",
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "TaskHdr",
            content = @Content(schema = @Schema(implementation = TaskHdrSchema.class))),
        @ApiResponse(responseCode = "404", description = "TaskHdr")
      })
  protected void putTaskHdrList(@RequestBody List<TaskHdrSchema> taskHdrList) {}
}
