package com.bigoviw887.modulo.filter;

import com.bigoviw887.modulo.config.SecurityConfig;
import com.bigoviw887.modulo.model.User;
import com.bigoviw887.modulo.services.AuthService;
import com.bigoviw887.modulo.util.CookieJwtUtil;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.UnsupportedJwtException;
import io.jsonwebtoken.security.SecurityException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletContext;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Arrays;
import javax.annotation.processing.Generated;
import lombok.NoArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.util.AntPathMatcher;
import org.springframework.web.filter.OncePerRequestFilter;

@Generated(value = "com.exocoding.codegen", comments = "Generated by ExoCoding 0.0.1-SNAPSHOT")
@NoArgsConstructor
public class JwtAuthorizationFilter extends OncePerRequestFilter {
  @Autowired private CookieJwtUtil cookieJwtUtil;
  @Autowired private AuthService authService;
  @Autowired private ServletContext servletContext;

  @Override
  protected void doFilterInternal(
      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
      throws ServletException, IOException {
    String email = null;

    String message = null;

    response.setContentType("application/json");
    response.setCharacterEncoding("UTF-8");

    String token = CookieJwtUtil.getValueCookie("token");
    if (token != null) {
      try {
        email = cookieJwtUtil.getEmailFromToken(token);
      } catch (ExpiredJwtException e) {
        message = "JSON Web Token is already expired";
      } catch (SecurityException e) {
        message = "JSON Web Token signature is invalid";
      } catch (UnsupportedJwtException | IllegalArgumentException | MalformedJwtException e) {
        message = "JSON Web Token with some error";
      }
    } else {
      message = "Authentication cookie `token` not provided";
    }

    if (email != null && SecurityContextHolder.getContext().getAuthentication() == null) {
      try {
        User userDetails = authService.loadUserByEmail(email);
        if (cookieJwtUtil.validateToken(token, userDetails)) {
          UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken =
              new UsernamePasswordAuthenticationToken(
                  userDetails, null, userDetails.getAuthorities());

          usernamePasswordAuthenticationToken.setDetails(
              new WebAuthenticationDetailsSource().buildDetails(request));

          SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
        }
      } catch (UsernameNotFoundException e) {
        message = "User in the token not found";
      }
    }
    if (message != null) {
      response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
      response.setContentLength(message.length());
      response.getOutputStream().write(message.getBytes());
    }
    filterChain.doFilter(request, response);
  }

  @Override
  protected boolean shouldNotFilter(HttpServletRequest request) {
    AntPathMatcher pathMatcher = new AntPathMatcher();
    return Arrays.stream(SecurityConfig.URLS_WITHOUT_AUTHENTICATION)
        .anyMatch(
            p ->
                pathMatcher.match(
                    String.format("%s%s", servletContext.getContextPath(), p),
                    request.getRequestURI()));
  }
}
