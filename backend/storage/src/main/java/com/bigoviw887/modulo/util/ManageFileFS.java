package com.bigoviw887.modulo.util;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

/** Class to deal with file in File System, used only into Assets sub module */
@Generated(value = "com.exocoding.codegen", comments = "Generated by ExoCoding 0.0.1-SNAPSHOT")
@Component
public class ManageFileFS {

  private static final String ASSETS_PATH =
      Path.of(Paths.get("").toAbsolutePath().toString(), "assets").toString();

  public Boolean write(String pathChecksum, byte[] Bfile) {
    try {
      File assetsDirectory = new File(ManageFileFS.ASSETS_PATH);
      if (!assetsDirectory.exists()) {
        // enter if not exist
        assetsDirectory.mkdirs();
      }
      File fileDirectory = new File(this.makeFileDirectoryPath(pathChecksum));
      if (!fileDirectory.exists()) {
        fileDirectory.mkdirs();
      }

      File fileImage = new File(this.makeFullFilePath(pathChecksum));
      try (FileOutputStream outputStream = new FileOutputStream(fileImage)) {
        outputStream.write(Bfile);
      }
      return true;
    } catch (IOException e) {
      return false;
    }
  }

  private String makeFileDirectoryPath(String checksum) {
    String firstSubstringChecksum = checksum.substring(0, 2);
    return Path.of(ManageFileFS.ASSETS_PATH, firstSubstringChecksum).toString();
  }

  private String makeFullFilePath(String checksum) {
    String fileName = checksum.substring(2);
    return Path.of(this.makeFileDirectoryPath(checksum), fileName).toString();
  }

  public byte[] read(String checksum) {
    try {
      File currentFile = new File(this.makeFullFilePath(checksum));

      if (!currentFile.exists()) {
        throw new Error("File does not exist!");
      }
      Path path = Paths.get(currentFile.getAbsolutePath());
      byte[] bytesFromFile = Files.readAllBytes(path);
      return bytesFromFile;
    } catch (IOException e) {
      throw new RuntimeException();
    }
  }

  public void deleteDirectoryIfEmpty(String fileDirectoryPath) {
    File fileDirectory = new File(fileDirectoryPath);
    if (fileDirectory.listFiles().length == 0) fileDirectory.delete();
  }

  public boolean delete(String checksum) {
    try {
      File file = new File(this.makeFullFilePath(checksum));
      // deleting file
      file.delete();

      // mount the path and pass to deleteDirectoryIfEmpty
      this.deleteDirectoryIfEmpty(this.makeFileDirectoryPath(checksum));

      return true;
    } catch (Exception e) {
      return false;
    }
  }
}
